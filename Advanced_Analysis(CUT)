
void initAnalysis() {

  clearLine(LCD_Y);

  int hold = 1;

  setScreen("Choose a Pokemon", 0, 0, 0, STOP);

  SearchPokemonNum(2, 2, 1);

  setScreen("Is this the correct", 0, 0, 0, STOP);
  setScreen("Pokemon ? ", 0, 0, 1, STOP);
  setScreen("      A : Confirm", 0, 2, 2, STOP);
  setScreen("      B : Cancel", 0, 2, 3, STOP);

  lcd.setCursor(9, 1);
  lcd.write(Pokemon);

  while (hold) {

    button();

    if (Press[a]) {

      IVSelect();
    }
    else if (Press[b]) {

      initAnalysis();
    }
    else if (Press[left]) {

      hold = 0;
      MenuBack = 1;
    }
  }

  if (MenuBack) {

    routineMenu(ANALYSIS);
  }

  if (Gender[MALE] == 0 || Gender[FEMALE] == 0) {

    if (Gender[MALE] == 0) {

      GenderChoice = FEMALE;
    }
    else if (Gender[FEMALE] == 0) {

      GenderChoice = MALE;
    }
    else {

      GenderChoice = NONE;
    }
  }
  else {

    GenderChoice = EITHER;
  }

  clearLine(LCD_Y);
}

void IVSelect() {

  int hold = 1;
  int keep = 1;

  int cursorX[6]     = {8, 18, 8, 18, 8, 18};
  int cursorY[6]     = {0, 0, 1, 1, 2, 2};
  int marker[3]      = {ZERO, NULLMARKER, THIRTYONE};

  GenderChoice = EITHER;

  AbilityCnt = 1;
  AbilityList[1] = 1;

  if (AbilityTwo[0] == '-') {

    AbilityList[1] = 0;
  }
  else {

    AbilityCnt++;
    AbilityList[1] = 1;
  }

  if (AbilityThree[0] == '-') {

    AbilityList[2] = 0;
  }
  else {

    AbilityCnt++;
    AbilityList[2] = 1;
  }

  if (Gender[MALE] == 0 || Gender[FEMALE] == 0) {

    if (Gender[MALE] == 0) {

      GenderChoice = FEMALE;
    }
    else if (Gender[FEMALE] == 0) {

      GenderChoice = MALE;
    }
    else {

      GenderChoice = NONE;
    }
  }
  else {

    GenderChoice = EITHER;
  }

  clearLine(LCD_Y);

  for (i = 0; i < 6; i++) {

    BaseIV[i] = 1;
  }

  setScreen("Y HP", 0, 0, 0, STOP);
  setScreen("X Atk", 0, 10, 0, STOP);
  setScreen("Def", 0, 2, 1, STOP);
  setScreen("S.Atk", 0, 12, 1, STOP);
  setScreen("S.Def", 0, 2, 2, STOP);
  setScreen("Spd", 0, 12, 2, STOP);

  setCharacter(LEFTWARD, 0, 1);        // Def
  setCharacter(UPWARD, 10, 1);         // S.Atk
  setCharacter(DOWNWARD, 0, 2);        // S.Def
  setCharacter(RIGHTWARD, 10, 2);      // Spd

  setScreen("A Confirm | B Cancel", 0, 0, 3, STOP);

  while (hold) {

    button();

    if (keep) {

      for (i = 0; i < 6; i++) {

        setCharacter(marker[BaseIV[i]], cursorX[i], cursorY[i]);
      }

      keep = 0;
    }

    if (Press[y]) {

      BaseIV[0] = Toggle(BaseIV[0], _DOWN, 3, LOOP);

      keep = 1;
    }
    else if (Press[x]) {

      BaseIV[1] = Toggle(BaseIV[1], _DOWN, 3, LOOP);

      keep = 1;
    }
    else if (Press[left]) {

      BaseIV[2] = Toggle(BaseIV[2], _DOWN, 3, LOOP);

      keep = 1;
    }
    else if (Press[up]) {

      BaseIV[3] = Toggle(BaseIV[3], _DOWN, 3, LOOP);

      keep = 1;
    }
    else if (Press[down]) {

      BaseIV[4] = Toggle(BaseIV[4], _DOWN, 3, LOOP);

      keep = 1;
    }
    else if (Press[right]) {

      BaseIV[5] = Toggle(BaseIV[5], _DOWN, 3, LOOP);

      keep = 1;
    }
    else if (Press[a]) {

      OtherAnalysis();
    }
    else if (Press[b]) {

      initAnalysis();
    }

    delay(50);
  }
}

void OtherAnalysis() {

  int hold = 1;
  int keep = 1;

  clearLine(LCD_Y);
  delay(100);

  minIV = 0;
  releaseCon = 0;

  setScreen("Minimum similar IVs ? ", 0, 0, 0, STOP);
  setScreen("A : Continue", 0, 8, 2, STOP);
  setScreen("B : Cancel", 0, 8, 3, STOP);

  while (hold) {

    button();

    if (keep) {

      setCharacter(UPWARD, 5, 1);
      setCharacter(DOWNWARD, 5, 3);

      setNumber(minIV, 0, 5, 2, STOP);

      keep = 0;
    }

    if (Press[up]) {

      setScreen(" ", 0, 5, 1, STOP);

      minIV = Toggle(minIV, _DOWN, 7, LOOP);

      delay(100);

      keep = 1;
    }
    else if (Press[down]) {

      setScreen(" ", 0, 5, 3, STOP);

      minIV = Toggle(minIV, _UP, 7, LOOP);

      delay(100);

      keep = 1;
    }
    else if (Press[a]) {

      hold = 0;
    }
    else if (Press[b]) {

      hold = 0;
      MenuBack = 1;
    }
  }

  if (MenuBack) {

    MenuBack = 0;

    IVSelect();
  }

  hold = 1;
  keep = 1;

  clearLine(LCD_Y);

  setScreen("Release Pokemon ? ", 0, 0, 0, STOP);
  setScreen("No", 0, 16, 2, STOP);
  setScreen("Yes", 0, 16, 3, STOP);

  setCharacter(RIGHTWARD, 15, 2);

  while (hold) {

    button();

    if (keep) {

      if (releaseCon) {

        setScreen(" ", 0, 15, 2, STOP);
        setCharacter(RIGHTWARD, 15, 3);
      }
      else {

        setScreen(" ", 0, 15, 3, STOP);
        setCharacter(RIGHTWARD, 15, 2);
      }
    }

    if (Press[up] || Press[down]) {

      releaseCon = !releaseCon;

      delay(100);

      keep = 1;
    }
    else if (Press[a]) {

      AnalysisMenu(0);
    }
    else if (Press[b]) {

      OtherAnalysis();
    }
  }
}

void AnalysisMenu(int start) {

  int hold = 1;
  int _POS = start;

  clearLine(LCD_Y);

  _POS = setList(analysisList, "Options", analysisListCnt, 0);

  if (_POS == 0) {

    NatureChoice = setList(natureList, "Nature", natureListCnt, 0);

    AnalysisMenu(_POS);
  }
  else if (_POS == 1) {

    BallChoice = setList(ballList, "The housing ball", ballListCnt, 0);

    AnalysisMenu(_POS);
  }
  else if (_POS == 2) {

    userAnalysisStart();
  }
  else if (_POS == 3) {

    initAnalysis();
  }
  else if (_POS == 4) {

    IVSelect();
  }
  else if (_POS == 5) {

    OtherAnalysis();
  }
}

void userAnalysisStart() {

  int checkNum          = 0;

  const char* IVs[3] = {"00", "xx", "31"};
  const char* YN[2]  = {"No", "Yes"};

  clearLine(LCD_Y);

  setScreen("How many pokemon ? ", 0, 0, 0, STOP);
  setScreen("A : Start", 0, 11, 2, STOP);
  setScreen("B : Cancel", 0, 11, 3, STOP);

  selectNumber(3, 7, 2, 0);

  checkNum = 100 * SELECT[0] + 10 * SELECT[1] + SELECT[2];

  if (MenuBack) {

    AnalysisMenu(0);
  }

  if (checkNum == 0) {

    clearLine(LCD_Y);

    setScreen("Do you wish to", 0, 0, 0, STOP);
    setScreen("continue ?  If not, ", 0, 0, 1, STOP);
    setScreen("press B when the", 0, 0, 2, STOP);
    setScreen("menu reloads.", 0, 0, 3, STOP);

    delay(5000);

    userAnalysisStart();
  }

  pokedex = SD.open("Analysis.txt", FILE_WRITE);

  pokedex.println("#========================================#");
  pokedex.println(" Settings");
  pokedex.println("#========================================#");
  pokedex.println();

  pokedex.print(" Pokemon :                        ");
  pokedex.println(Pokemon);
  pokedex.print(" Desired IVs :                    ");

  for (i = 0; i < 6; i++) {

    pokedex.print(IVs[BaseIV[i]]);

    if (i != 5) {

      pokedex.print(" | ");
    }
  }
  pokedex.println();

  pokedex.print(" Preset Nature :                  ");
  pokedex.println(natureList[NatureChoice]);

  if (AbilityCnt) {

    pokedex.print(" Preset Ability :                  ");
    pokedex.println(AbilityOne);
  }

  pokedex.print(" Minimum IV Overlap :     ");
  pokedex.println(minIV);
  pokedex.print(" Preset Ball :                      ");
  pokedex.println(ballList[BallChoice]);

  if (GenderChoice != EITHER) {

    pokedex.print("Preset Gender : ");
    pokedex.println(Genders[GenderChoice]);
  }
  pokedex.print(" Release :                           ");
  pokedex.println(YN[releaseCon]);
  pokedex.println();
  pokedex.print(" Pokemon to Check :         ");
  pokedex.println(checkNum);
  pokedex.println();

  pokedex.println("#========================================#");
  pokedex.println();

  pokedex.close();

  analysisRoutine(checkNum);
}

void analysisRoutine(int Number) {

  int CheckedCnt = 0;
  int RemainingCnt = Number;

  int boxCnt = 0;
  int u;

  int hold = 1;
  int keep = 1;
  int check = 1;
  int ivcnt;

  int cursorX[6]     = {8, 18, 8, 18, 8, 18};
  int cursorY[6]     = {0, 0, 1, 1, 2, 2};
  int marker[3]      = {ZERO, NULLMARKER, THIRTYONE};

  const char* IVs[3] = {"00", "xx", "31"};
  const char* YN[2]  = {"No", "Yes"};

  WithdrawCnt = 0;

  clearLine(LCD_Y);

  setScreen("Remaining", 0, 0, 0, STOP);
  setNumber(Number, 0, 10, 0, STOP);

  while (RemainingCnt > 0) {

    A(push);
    delay(1900);

    for (i = 0; i < 2; i++) {

      A(push);
    }

    Down(push);
    A(push);
    delay(2100);

    for (i = 0; i < boxCnt - 1; i++) {

      Down(push);
    }

    for (i = 0; i < 6 - boxCnt; i++) {

      if (6 - boxCnt != 6) {

        Right(push);
      }
    }

    for (u = 0; u < boxCnt - 1; u++) {

      BasicAnalysis();

      A(push);
      A(push);
      delay(1000);
      Right(push);

      WithdrawCnt++;
    }

    if (boxCnt != 0 && boxCnt != 5) {

      BasicAnalysis();

      A(push);
      A(push);

      delay(1000);

      Down(push);

      WithdrawCnt++;

      for (u = 0; u < 5; u++) {

        Left(push);
      }
    }
    else if (boxCnt == 5) {

      BasicAnalysis();

      A(push);
      A(push);

      delay(1000);

      Right(push);

      WithdrawCnt++;
    }

    for (u = 0; u < 5 - boxCnt; u++) {

      BasicAnalysis();

      A(push);
      A(push);

      delay(1000);

      Right(push);

      WithdrawCnt++;
    }

    boxCnt++;

    if (boxCnt == 6) {

      boxCnt = 0;
    }

    clearLine(LCD_Y);

    X(push);

    delay(2700);

    Right(4 * push);
    Up(push);

    CheckCnt = 1;

    while (CheckCnt <= 5) {

      ivcnt = 0;

      button();

      if (check) {

        check = 0;

        A(push);
        delay(1000);
        A(push);
        delay(1750);

        for (u = 0; u < CheckCnt % 2; u++) {

          Right(push);
        }
        for (u = 0; u < CheckCnt / 2; u++) {

          Down(push);
        }

        A(push);
        delay(2500);
        A(push);
        A(push);
        A(push);

        for (i = 0; i < 15; i++) {

          if (Light < phot() - 20) {

            Light = phot() - 20;
          }
        }

        clearLine(LCD_Y);

        for (i = 0; i < 6; i++) {

          IVArray[CheckCnt][i] = 1;
        }

        IVArray[CheckCnt][6] = 0;

        setScreen("Y HP", 0, 0, 0, STOP);
        setScreen("X Atk", 0, 10, 0, STOP);
        setScreen("Def", 0, 2, 1, STOP);
        setScreen("S.Atk", 0, 12, 1, STOP);
        setScreen("S.Def", 0, 2, 2, STOP);
        setScreen("Spd", 0, 12, 2, STOP);

        setCharacter(LEFTWARD, 0, 1);        // Def
        setCharacter(UPWARD, 10, 1);         // S.Atk
        setCharacter(DOWNWARD, 0, 2);        // S.Def
        setCharacter(RIGHTWARD, 10, 2);      // Spd

        setScreen("A Confirm", 0, 10, 3, STOP);

        while (hold) {

          button();

          if (keep) {

            for (i = 0; i < 6; i++) {

              setCharacter(marker[IVArray[CheckCnt][i]], cursorX[i], cursorY[i]);
            }

            keep = 0;
          }

          if (Press[y]) {

            IVArray[CheckCnt][0] = Toggle(IVArray[CheckCnt][0], _DOWN, 3, LOOP);

            keep = 1;
          }
          else if (Press[x]) {

            IVArray[CheckCnt][1] = Toggle(IVArray[CheckCnt][1], _DOWN, 3, LOOP);

            keep = 1;
          }
          else if (Press[left]) {

            IVArray[CheckCnt][2] = Toggle(IVArray[CheckCnt][2], _DOWN, 3, LOOP);

            keep = 1;
          }
          else if (Press[up]) {

            IVArray[CheckCnt][3] = Toggle(IVArray[CheckCnt][3], _DOWN, 3, LOOP);

            keep = 1;
          }
          else if (Press[down]) {

            IVArray[CheckCnt][4] = Toggle(IVArray[CheckCnt][4], _DOWN, 3, LOOP);

            keep = 1;
          }
          else if (Press[right]) {

            IVArray[CheckCnt][5] = Toggle(IVArray[CheckCnt][5], _DOWN, 3, LOOP);

            keep = 1;
          }
          else if (Press[a]) {

            A(push);
          }

          if (phot() > Light) {

            hold = 0;
          }
        }
      }

      if (releaseCon) {

        for (i = 0; i < 6; i++) {

          if (IVArray[CheckCnt][i] == BaseIV[i] && BaseIV[i] == 2) {

            ivcnt++;
          }
        }

        if (ivcnt < minIV) {

          IVArray[CheckCnt][6] = 1;
        }
        else {

          IVArray[CheckCnt][6] = 0;
        }

        if (ShinyArray[CheckCnt]) {

          IVArray[CheckCnt][6] = 0;
        }
      }

      pokedex = SD.open("Analysis.txt", FILE_WRITE);

      pokedex.print(RemainingCnt + 1);
      pokedex.print(". ");
      pokedex.println(Pokemon);

      if (!NatureChoice) {

        pokedex.print("Nature : ");
        pokedex.println(NatureArray[CheckCnt]);
      }
      if (!AbilityChoice) {

        pokedex.print("Ability : ");

        if (AbilityArray[CheckCnt] == 1) {

          pokedex.println(AbilityOne);
        }
        else if (AbilityArray[CheckCnt] == 2) {

          pokedex.println(AbilityTwo);
        }
        else {

          pokedex.println(AbilityThree);
        }
      }
      if (GenderChoice == EITHER) {

        pokedex.print("Gender : ");
        pokedex.println(Genders[GenderArray[CheckCnt]]);
      }

      pokedex.print("IVs : ");

      for (i = 0; i < 6; i++) {

        pokedex.print(IVs[IVArray[CheckCnt][i]]);

        if (i != 5) {

          pokedex.print(" | ");
        }
      }
      pokedex.println();

      pokedex.print("Released : ");
      pokedex.println(YN[releaseCon]);

      pokedex.println();

      pokedex.close();

      CheckCnt++;
      check = 1;
      hold = 1;
      keep = 1;

      CheckedCnt++;
      RemainingCnt--;
    }

    CheckCnt = 1;

    Down(push);
    Left(4 * push);
    Up(push);
    A(push);

    delay(1900);

    for (u = 0; u < 3; u++) {

      A(push);
    }

    delay(2100);

    Right(push);

    while (CheckCnt <= 5) {

      if (IVArray[CheckCnt][6]) {

        A(push);
        Up(push);
        Up(push);
        A(push);
        Up(push);
        A(push);

        delay(1000);

        A(push);
        A(push);

        delay(500);
      }
      else {

        A(push);
        Down(push);
        Down(push);
        A(push);
        delay(500);
        Up(push);
        Up(push);
        Up(push);

        for (i = 0; i < 6; i++) {

          if (i % 2 == 0) {

            if (i != 0) {

              Left(push);
              Down(push);
            }
          }
          else {

            if (i != 0) {

              Right(push);
            }
          }

          if (IVArray[CheckCnt][i] == 2) {

            A(push);
          }
        }

        Down(push);
        A(push);
        Up(push);
        Up(push);
        A(push);
        delay(100);
        A(push);
        delay(500);
        Right(push);
        delay(500);
      }

      CheckCnt++;
    }

    clearLine(LCD_Y);

    X(push);
    delay(3000);
  }
}

void BasicAnalysis() {

  int hold = 1;
  int MinorContinue[2] = {0, 0};
  int AbilityContinue  = 0;
  int AbilityCount[3] = {1, 0, 0};

  for (i = 1; i < 4; i++) {

    setScreen("                    ", 0, 0, i, STOP);
  }

  if (GenderChoice == EITHER) {

    setScreen("Gender    Shiny", 0, 0, 1, STOP);
    setScreen("Male", 0, 3, 2, STOP);
    setScreen("Female", 0, 3, 3, STOP);
    setScreen("Yes", 0, 13, 2, STOP);
    setScreen("No", 0, 13, 3, STOP);

    setCharacter(UPWARD, 1, 2);
    setCharacter(LEFTWARD, 1, 3);
    setCharacter(RIGHTWARD, 11, 2);
    setCharacter(DOWNWARD, 11, 3);

    while (hold) {

      button();

      if (Press[up]) {

        setScreen("Male", 0, 3, 2, STOP);
        setCharacter(UPWARD, 1, 2);

        setScreen("          ", 0, 0, 3, STOP);

        GenderArray[WithdrawCnt] = MALE;

        MinorContinue[0] = 1;
      }
      else if (Press[left]) {

        setScreen("Female", 0, 3, 3, STOP);
        setCharacter(LEFTWARD, 1, 3);

        setScreen("          ", 0, 0, 2, STOP);

        GenderArray[WithdrawCnt] = FEMALE;

        MinorContinue[0] = 1;
      }
      else if (Press[right]) {

        setScreen("Yes", 0, 13, 2, STOP);
        setCharacter(RIGHTWARD, 11, 2);

        setScreen("          ", 0, 10, 3, STOP);

        ShinyArray[WithdrawCnt] = 1;

        MinorContinue[1] = 1;
      }
      else if (Press[down]) {

        setScreen("No", 0, 13, 3, STOP);
        setCharacter(DOWNWARD, 11, 3);

        setScreen("          ", 0, 10, 2, STOP);

        ShinyArray[WithdrawCnt] = 0;

        MinorContinue[1] = 1;
      }
      else if (Press[a] && MinorContinue[0] && MinorContinue[1]) {

        hold = 0;
      }
    }
  }
  else {

    setScreen("Shiny", 0, 0, 1, STOP);

    setScreen("Yes", 0, 3, 2, STOP);
    setScreen("No", 0, 3, 3, STOP);

    setCharacter(RIGHTWARD, 1, 2);
    setCharacter(DOWNWARD, 1, 3);

    while (hold) {

      button();

      if (Press[right]) {

        setScreen("Yes", 0, 3, 2, STOP);
        setCharacter(RIGHTWARD, 1, 2);

        setScreen("          ", 0, 0, 3, STOP);

        ShinyArray[WithdrawCnt] = 1;

        MinorContinue[1] = 1;
      }
      else if (Press[down]) {

        setScreen("No", 0, 3, 3, STOP);
        setCharacter(DOWNWARD, 1, 3);

        setScreen("          ", 0, 0, 2, STOP);

        ShinyArray[WithdrawCnt] = 0;

        MinorContinue[1] = 1;
      }
      else if (Press[a] && MinorContinue[1]) {

        hold = 0;
      }
    }
  }

  hold = 1;

  for (i = 1; i < 4; i++) {

    setScreen("                    ", 0, 0, i, STOP);
  }

  if (AbilityCnt == 1) {

    AbilityArray[WithdrawCnt] = 0;
  }
  else if (AbilityCnt != 1) {

    lcd.setCursor(3, 1);
    lcd.print(AbilityOne);
    setCharacter(UPWARD, 1, 1);

    setCharacter(RIGHTWARD, 1, 2);
    lcd.setCursor(3, 2);

    if (AbilityTwo[0] != '-' && AbilityThree[0] == '-') {

      lcd.print(AbilityTwo);

      AbilityCount[1] = 1;
    }
    else if (AbilityTwo[0] == '-' && AbilityThree[0] != '-') {

      lcd.print(AbilityThree);

      AbilityCount[2] = 1;
    }
    else {

      lcd.print(AbilityTwo);
      lcd.setCursor(3, 3);
      lcd.print(AbilityThree);
      setCharacter(DOWNWARD, 1, 3);

      AbilityCount[2] = 1;
      AbilityCount[3] = 1;
    }

    while (hold) {

      button();

      if (Press[up]) {

        lcd.setCursor(3, 1);
        lcd.print(AbilityOne);
        setCharacter(UPWARD, 1, 1);

        setScreen("                    ", 0, 0, 2, STOP);
        setScreen("                    ", 0, 0, 3, STOP);

        AbilityContinue = 1;

        AbilityArray[WithdrawCnt] = 0;
      }
      else if (Press[right]) {

        AbilityContinue = 1;

        setCharacter(RIGHTWARD, 1, 2);
        lcd.setCursor(3, 2);

        if (AbilityCnt == 2) {

          if (AbilityCount[1]) {

            lcd.print(AbilityTwo);

            AbilityArray[WithdrawCnt] = 1;
          }
          else {

            lcd.print(AbilityThree);

            AbilityArray[WithdrawCnt] = 2;
          }
        }
        else if (AbilityCnt == 3) {

          lcd.print(AbilityTwo);

          setScreen("                    ", 0, 0, 1, STOP);
          setScreen("                    ", 0, 0, 3, STOP);

          AbilityArray[WithdrawCnt] = 1;
        }
      }
      else if (Press[down] && AbilityCnt == 3) {

        setScreen("                    ", 0, 0, 1, STOP);
        setScreen("                    ", 0, 0, 2, STOP);

        setCharacter(RIGHTWARD, 1, 3);
        lcd.setCursor(3, 3);
        lcd.print(AbilityThree);

        AbilityContinue = 1;

        AbilityArray[WithdrawCnt] = 2;
      }
      else if (Press[a] && AbilityContinue) {

        hold = 0;
      }
    }
  }

  hold = 1;

  if (NatureChoice == 0) {

    while (hold) {

      NatureArray[WithdrawCnt] = setList(natureList, "Nature", natureListCnt, 0);

      if (NatureArray[WithdrawCnt] != 0) {

        hold = 0;
      }
    }
  }

  hold = 1;

  if (BallChoice == 0) {

    while (hold) {

      BallArray[WithdrawCnt] = setList(ballList, "The housing ball", ballListCnt, 0);

      if (BallArray[WithdrawCnt] != 0) {

        hold = 0;
      }
    }
  }
}
